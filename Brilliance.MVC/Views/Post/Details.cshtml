@using System.Security.Claims;
@{
    ViewData["Title"] = "Post";
}

<main class="section">
    <div class="container">
        <h1 class="title-1" id="postTitle"></h1>
        <div class="project-details__desc">
            <p id="postDescription"></p>
        </div>
        <div class="comments-section">
            <h2 class="title-2">Comments</h2>
            <ul id="commentsList" class="comments-list"></ul>
            @if (User.Identity.IsAuthenticated)
            {
                <form id="commentForm" class="comment-form">
                    <div class="comment-input">
                        <input class="comment-input-field" type="text" id="commentContent" name="commentContent" required placeholder="Write a comment..." />
                    </div>
                    <div class="comment-action">
                        <button id="submitButton" disabled type="submit" class="comment-submit-button"></button>
                    </div>
                </form>
                <script>
                    document.addEventListener("DOMContentLoaded", function () {
                        var commentInput = document.getElementById("commentContent");
                        var submitButton = document.getElementById("submitButton");
                        commentInput.addEventListener("input", function () {
                            submitButton.disabled = commentInput.value.trim() === "";
                        });
                    });
                </script>
                <script>
                    var commentFormRendered = true;
                </script>
            }
        </div>
    </div>
</main>
@section scripts
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var postId = window.location.pathname.split('/').pop();

            fetch('http://localhost/api/v1/posts/' + postId, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data);

                    var postTitleElement = document.getElementById('postTitle');
                    var postDescriptionElement = document.getElementById('postDescription');
                    var commentsListElement = document.getElementById('commentsList');

                    postTitleElement.textContent = data.title;
                    postDescriptionElement.textContent = data.description;

                    var userIsAdmin = "@User.IsInRole("Admin").ToString().ToLower()" === "true";
                    data.comments.forEach(comment => {
                        var commentItem = document.createElement('li');
                        var commentBlock = document.createElement('div');
                        commentBlock.classList.add('comment-block');

                        var commentContent = document.createElement('p');
                        commentContent.innerHTML = `<strong>${comment.username}:</strong> ${comment.name}`;

                        commentBlock.appendChild(commentContent);

                        if (userIsAdmin) {
                            var deleteButton = document.createElement('button');
                            deleteButton.textContent = 'Delete';
                            deleteButton.classList.add('delete-button');

                            deleteButton.addEventListener('click', function () {
                                var commentId = deleteButton.getAttribute('data-id');

                                deleteComment(commentId);

                                commentItem.remove();
                            });

                            deleteButton.setAttribute('data-id', comment.id);

                            commentBlock.appendChild(deleteButton);
                        }

                        commentItem.appendChild(commentBlock);

                        commentsListElement.appendChild(commentItem);
                    });


                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
            if (typeof commentFormRendered !== 'undefined' && commentFormRendered) {
                var commentForm = document.getElementById('commentForm');
                commentForm.addEventListener('submit', function (event) {
                    event.preventDefault();

                    var commentContent = document.getElementById('commentContent').value;

                    fetch('http://localhost/api/v1/comment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            idUser: "@User?.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString()",
                            idPost: postId,
                            name: commentContent
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(newComment => {
                            // console.log('New Comment:', newComment);

                            // var commentItem = document.createElement('li');
                            // var commentBlock = document.createElement('div');
                            // commentBlock.classList.add('comment-block');

                            // var commentsListElement = document.getElementById('commentsList');
                            // commentItem.innerHTML = `<p><strong>${newComment.username}:</strong> ${newComment.name}`;
                            // commentBlock.appendChild(commentItem);

                            // var userIsAdmin = "@User.IsInRole("Admin").ToString().ToLower()" === "true";
                            // if (userIsAdmin) {
                            //     var deleteButton = document.createElement('button');
                            //     deleteButton.textContent = 'Delete';
                            //     deleteButton.classList.add('delete-button');

                            //     deleteButton.addEventListener('click', function () {
                            //         var commentId = deleteButton.getAttribute('data-id');

                            //         deleteComment(commentId);

                            //         commentItem.remove();
                            //     });

                            //     deleteButton.setAttribute('data-id', newComment.id);

                            //     commentBlock.appendChild(deleteButton);
                            // }
                            // commentItem.innerHTML += `</p>`;
                            // commentsListElement.appendChild(commentItem);
                            var userIsAdmin = "@User.IsInRole("Admin").ToString().ToLower()" === "true";
                            var commentsListElement = document.getElementById('commentsList');

                            var commentItem = document.createElement('li');
                            var commentBlock = document.createElement('div');
                            commentBlock.classList.add('comment-block');

                            var commentContent = document.createElement('p');
                            commentContent.innerHTML = `<strong>${newComment.username}:</strong> ${newComment.name}`;

                            commentBlock.appendChild(commentContent);

                            if (userIsAdmin) {
                                var deleteButton = document.createElement('button');
                                deleteButton.textContent = 'Delete';
                                deleteButton.classList.add('delete-button');

                                deleteButton.addEventListener('click', function () {
                                    var commentId = deleteButton.getAttribute('data-id');

                                    deleteComment(commentId);

                                    commentItem.remove();
                                });

                                deleteButton.setAttribute('data-id', newComment.id);

                                commentBlock.appendChild(deleteButton);
                            }

                            commentItem.appendChild(commentBlock);

                            commentsListElement.appendChild(commentItem);

                            commentForm.reset();
                        })
                        .catch(error => {
                            console.error('There was a problem with the fetch operation:', error);
                        });
                });
            }
        });
    </script>
    <script>
        function deleteComment(commentId) {
            var deleteUrl = 'http://localhost/api/v1/comment/' + commentId;

            var requestOptions = {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            };

            fetch(deleteUrl, requestOptions)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                })
                .then(data => {
                    console.log('Post deleted successfully', data);
                })
                .catch(error => {
                    console.error('Error deleting post:', error);
                });
        }
    </script>
}